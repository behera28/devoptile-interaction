
import { useState, useEffect } from "react";
import { History } from "lucide-react";
import Navbar from "../components/Navbar";
import ChatInput from "../components/ChatInput";
import FAQ from "../components/FAQ";
import HistorySidebar from "../components/HistorySidebar";

// Mock data for conversation history
const mockSessions = [
  { id: "1", title: "Kubernetes Setup", date: "Today, 2:17 PM" },
  { id: "2", title: "Docker Issues", date: "Yesterday, 10:30 AM" },
  { id: "3", title: "CI/CD Pipeline Setup", date: "Jan 15, 5:45 PM" }
];

// Mock data for FAQs
const defaultFAQs = [
  {
    question: "What is DevOps?",
    answer: "DevOps is a set of practices that combines software development (Dev) and IT operations (Ops) to shorten the systems development life cycle while delivering features, fixes, and updates frequently in close alignment with business objectives."
  },
  {
    question: "What are CI/CD pipelines?",
    answer: "CI/CD stands for Continuous Integration and Continuous Delivery/Deployment. These pipelines automate the building, testing, and deployment of applications, enabling teams to release code changes more frequently and reliably."
  },
  {
    question: "What is Infrastructure as Code (IaC)?",
    answer: "Infrastructure as Code is the process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools."
  },
  {
    question: "Which tools are commonly used for monitoring in DevOps?",
    answer: "Common monitoring tools include Prometheus, Grafana, Nagios, New Relic, Datadog, and ELK Stack (Elasticsearch, Logstash, and Kibana)."
  }
];

interface Message {
  id: string;
  content: string;
  sender: "user" | "assistant";
  timestamp: Date;
  image?: string;
}

const DevOpsAssistant = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [activeChatId, setActiveChatId] = useState<string | undefined>(undefined);
  const [faqs, setFaqs] = useState(defaultFAQs);

  // Function to handle sending a new message
  const handleSendMessage = (content: string, image?: File) => {
    if (!content.trim() && !image) return;
    
    // Create a new user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: "user",
      timestamp: new Date(),
      image: image ? URL.createObjectURL(image) : undefined
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Simulate assistant response after a short delay
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "This is a simulated response to your DevOps query. In a real application, this would be generated by an AI assistant with knowledge of DevOps practices, tools, and cloud infrastructure.",
        sender: "assistant",
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      
      // Update FAQs based on the query
      if (content.toLowerCase().includes("kubernetes")) {
        setFaqs([
          {
            question: "What is Kubernetes?",
            answer: "Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications."
          },
          {
            question: "What are Kubernetes pods?",
            answer: "Pods are the smallest deployable units in Kubernetes that can be created and managed. A pod is a group of one or more containers with shared storage and network resources."
          },
          ...defaultFAQs.slice(0, 2)
        ]);
      } else if (content.toLowerCase().includes("docker")) {
        setFaqs([
          {
            question: "What is Docker?",
            answer: "Docker is a platform that uses OS-level virtualization to deliver software in packages called containers, which contain everything needed to run an application."
          },
          {
            question: "What's the difference between Docker and virtual machines?",
            answer: "Docker containers share the host system's kernel and are more lightweight than virtual machines, which require a full OS. Containers start up faster and use fewer resources."
          },
          ...defaultFAQs.slice(0, 2)
        ]);
      }
    }, 1000);
  };

  // Open a new chat
  const handleNewChat = () => {
    setMessages([]);
    setActiveChatId(undefined);
    setSidebarOpen(false);
  };

  // Select an existing chat
  const handleSelectChat = (id: string) => {
    setActiveChatId(id);
    // In a real app, you'd load the messages for this chat from your backend
    setSidebarOpen(false);
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      {/* History sidebar */}
      <HistorySidebar 
        isOpen={sidebarOpen}
        onClose={() => setSidebarOpen(false)}
        onNewChat={handleNewChat}
        onSelectChat={handleSelectChat}
        sessions={mockSessions}
        activeChatId={activeChatId}
      />
      
      {/* Main content */}
      <div className="flex-1 pt-16">
        <div className="container mx-auto px-4 py-8 flex flex-col h-[calc(100vh-64px)]">
          <div className="flex items-center mb-6">
            <button 
              onClick={() => setSidebarOpen(true)}
              className="mr-4 p-2 rounded-full hover:bg-white/10 transition-colors"
              aria-label="Open history"
            >
              <History size={20} />
            </button>
            <h1 className="text-3xl font-bold">DevOps Assistant</h1>
          </div>
          
          <div className="flex-1 flex flex-col md:flex-row gap-6 overflow-hidden">
            {/* Chat area */}
            <div className="flex-1 flex flex-col bg-cloud-dark/30 backdrop-blur-md rounded-xl p-4 overflow-hidden">
              <div className="flex-1 overflow-y-auto mb-4">
                {messages.length === 0 ? (
                  <div className="h-full flex flex-col items-center justify-center text-center px-4">
                    <div className="max-w-md">
                      <h2 className="text-2xl font-semibold mb-2">Ask me anything about DevOps!</h2>
                      <p className="text-white/70 mb-6">
                        Examples: Docker, Kubernetes, CI/CD pipelines, Terraform
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {[
                          "How do I set up a Kubernetes cluster?",
                          "Explain Docker volumes",
                          "Best practices for CI/CD pipelines",
                          "Terraform vs CloudFormation"
                        ].map((suggestion, i) => (
                          <button
                            key={i}
                            className="bg-white/10 hover:bg-white/20 rounded-lg p-3 text-left transition-colors"
                            onClick={() => handleSendMessage(suggestion)}
                          >
                            {suggestion}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4 py-4">
                    {messages.map((message) => (
                      <div
                        key={message.id}
                        className={`chat-bubble ${
                          message.sender === "user" ? "user-bubble" : "assistant-bubble"
                        }`}
                      >
                        {message.image && (
                          <img 
                            src={message.image} 
                            alt="User uploaded" 
                            className="mb-2 rounded-md max-w-full max-h-60 object-contain"
                          />
                        )}
                        <p className="whitespace-pre-wrap">{message.content}</p>
                        <div className="text-xs opacity-70 mt-1 text-right">
                          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              
              <ChatInput onSend={handleSendMessage} />
            </div>
            
            {/* FAQ section - hidden on mobile, shown on desktop */}
            <div className="md:w-96 hidden md:block overflow-y-auto">
              <FAQ items={faqs} />
            </div>
          </div>
          
          {/* FAQ section - only shown on mobile */}
          <div className="mt-8 md:hidden">
            <FAQ items={faqs} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default DevOpsAssistant;
